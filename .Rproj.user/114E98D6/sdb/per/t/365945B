{
    "contents" : "#' Get all orthologs in given species\n#' \n#' Get all orthologs in given species by taxonomy IDs.\n#' \n#' @param taxid NCBI taxonomy ID of given species\n#' @param type.id which type of IDs are used: Entrez Gene ID, Ensembl gene ID, Ensembl peptide ID\n#' @return data frame of three columns: cluster ID, taxonomy ID, Ensembl peptide ID.\n#' @keywords ortholog gortholog\n#' @export\n#' @examples\n#' human.mouse <- GetAllOrthologs(taxid=c(9606, 10090), id.type=\"ensembl_pep_id\")\n#' scer.pombe <- GetAllOrthologs(taxid=c(4932, 4896), id.type=\"entrez_gene_id\")\n#' @author Mark J Chen \\email{chenj99@@gene.com}\n#' \nGetAllOrthologs <- function(taxid=taxid, id.type=c(\"entrez_gene_id\", \"ensembl_pep_id\", \"ensembl_gene_id\"), taxid.ridx=2) {\n  gortholog.data <- LoadGorthologData(id.type)\n  #row.index <- match(taxid, gortholog.data[ , taxid.index])\n  row.index <- unlist(\n    sapply(taxid, function(x, gd=gd, idx=idx) { return( which(gd[, idx] == x )) }, \n           gd=gortholog.data, idx=taxid.ridx) )\n  return(gortholog.data[row.index,])\n}\n\n\n#' Find orthologs in other species by gene/protein IDs\n#' \n#' Find orthologs in other species given IDs and their source species taxonomy ID\n#'\n#' @param query.id query IDs\n#' @param id.type which type of IDs are used: Entrez Gene ID, Ensembl gene ID, Ensembl peptide ID\n#' @param source.taxid NCBI taxonomy ID of source species\n#' @param target.taxid NCBI taxonomy ID of target species\n#' @return list of elements each of which is a vector of Ensembl peptide IDs in target species\n#' @keywords ortholog gortholog\n#' @export\n#' @examples\n#' GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c(\"YIL106W\", \"YOR358W\"), id.type=\"ensembl_pep_id\")\n#' GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c(854700, 854540), id.type=\"entrez_gene_id\")\n#' @author Mark J Chen \\email{chenj99@@gene.com}\n#' \nGetOrthologs <- function(source.taxid=source.taxid, target.taxid=target.taxid, \n                         query.id=query.id, id.type=c(\"entrez_gene_id\", \"ensembl_pep_id\", \"ensembl_gene_id\"), \n                         clusterid.cidx=1, taxid.cidx=2, id.cidx=3,\n                         no.id=NA, diagnose=FALSE) {\n  # no input?\n  empty <- ( is.na(query.id) | query.id =='' )\n  if ( sum(empty) > 0 ) warning('One or more empty gene ID in input')\t\n  # find cluster of query \n  gortholog.data <- LoadGorthologData(id.type)\n  query.ridx <- match(query.id, gortholog.data[ , id.cidx])\n  cluster.id <- gortholog.data[query.ridx, clusterid.cidx]\n  # fail to map to cluster?\n  noentry <- (is.na(query.ridx) & !empty)\n  if ( sum(noentry) > 0 ) warning('One or more gene input gene ID not found in gortholog')\n  # create list since one-to-many\n  target.id <- as.list( rep(no.id, length(query.id)) )\n  # target species row index\n  target.taxid.ridx <- gortholog.data[ , taxid.cidx] == target.taxid\n  # which row to process\n  idx <- which(!empty & !noentry)\n  if (sum(!empty & !noentry) > 0) {\n    for (i in 1:sum(!empty & !noentry)) {\n      # For each row of query and its cluster, select target species AND have the cluster ID; return ensembl pep id column\n      target.id[[idx[i]]] <- gortholog.data[ which( target.taxid.ridx & gortholog.data[ , clusterid.cidx] == cluster.id[idx[i]]), id.cidx]\n    }\n  }\n  # map to no gene (i.e. though query map to a cluster, but the cluster is absent in target species)\n  target.id.nb<-sapply(target.id, function(x) { length(x) })\n  no.target.id <- target.id.nb == 0\n  if (sum(no.target.id) > 0) warning('One or more gene ID with no target provided in homologue table')\n  # assign to NA\n  target.id[noentry | no.target.id] <- no.id\n  # \n  if (diagnose) { \n    return(list(target.id,empty,noentry,no.target.id))\n  } else {\n    return(target.id)\n  }\n}\n\n#' Load gOrtholog data\n#' \n#' Load gOrtholog data\n#' \n#' @param type.id which type of IDs are used: Entrez Gene ID, Ensembl gene ID, Ensembl peptide ID\n#' @return loaded data\n#' @export\n#' @examples\n#' LoadGorthologData()\n#' @author Mark J Chen \\email{chenj99@@gene.com}\n#'\nLoadGorthologData <- function(id.type=id.type) {\n  data(gorthologData)\n  if (id.type == \"entrez_gene_id\") {\n    data(gorthologDataEntrezGeneid)  # where to load this in package-wide scope?\n    return(gortholog.entrez.geneid)\n  } else if (id.type == \"ensembl_gene_id\") {\n    data(gorthologDataEnsemblGeneid)  # where to load this in package-wide scope?\n    return(gortholog.ensembl.geneid)\n  } else if (id.type == \"ensembl_pep_id\") {\n    data(gorthologDataEnsemblPepid)  # where to load this in package-wide scope?\n    return(gortholog.ensembl.pepid)\n  }\n}\n\n\n# # ID converter\n# IdConverter <- function(id.type=id.type) {\n# \n# }\n\n# # Generate R data file\n# GenerateRdataFile <- function() {\n#   # gortholog.data\n#   gortholog.data <- read.table(\"extdata//cid_taxid_pgi.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(gortholog.data) <- c(\"cluster_id\", \"taxonomy_id\", \"primary_id\")\n#   save(\"gortholog.data\", file=\"data/gorthologData.rda\")\n#   # gortholog.entrez.geneid\n#   gortholog.entrez.geneid <- read.table(\"extdata//cid_taxid_gene_id.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(gortholog.entrez.geneid) <- c(\"cluster_id\", \"taxonomy_id\", \"entrez_geneid\")\n#   save(\"gortholog.entrez.geneid\", file=\"data/gorthologDataEntrezGeneid.rda\")\n#   # gortholog.ensembl.geneid\n#   gortholog.ensembl.geneid <- read.table(\"extdata//cid_taxid_ens_gene_id.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(gortholog.ensembl.geneid) <- c(\"cluster_id\", \"taxonomy_id\", \"ensembl_geneid\")\n#   save(\"gortholog.ensembl.geneid\", file=\"data/gorthologDataEnsemblGeneid.rda\")\n#   # gortholog.ensembl.peptide.id\n#   gortholog.ensembl.pepid <- read.table(\"extdata//cid_taxid_ens_pep_id.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(gortholog.ensembl.pepid) <- c(\"cluster_id\", \"taxonomy_id\", \"ensembl_pepid\")\n#   save(\"gortholog.ensembl.pepid\", file=\"data/gorthologDataEnsemblPepid.rda\")\n#   # ensembl peptide id\n#   ensembl.pepid <- read.table(\"extdata//pgi_ens_pep_id.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(ensembl.pepid) <- c(\"primary_id\", \"ensembl_pepid\")\n#   save(\"ensembl.pepid\", file=\"data/ensemblPepid.rda\")\n#   # ensembl gene id\n#   ensembl.geneid <- read.table(\"extdata//pgi_ens_gene_id.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(ensembl.geneid) <- c(\"primary_id\", \"ensembl_geneid\")\n#   save(\"ensembl.geneid\", file=\"data/ensemblGeneid.rda\")\n#   # entrez gene\n#   entrez.geneid <- read.table(\"extdata//pgi_gene_id.tab\", header=FALSE, stringsAsFactors=FALSE, sep=\"\\t\")\n#   colnames(entrez.geneid) <- c(\"primary_id\", \"entrez_geneid\")\n#   save(\"entrez.geneid\", file=\"data/entrezGeneid.rda\")\n# }",
    "created" : 1390453487612.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1448081815",
    "id" : "365945B",
    "lastKnownWriteTime" : 1390456860,
    "path" : "~/workspace/orthology/web/gorthoR/R/getOrthologs.R",
    "project_path" : "R/getOrthologs.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}
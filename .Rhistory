install.packages(c("Cairo", "e1071", "extrafont", "foreign", "genoPlotR", "gtools", "lattice", "mapproj", "Matrix", "mgcv", "msm", "mvtnorm", "NCBI2R", "nlme", "pROC", "R.methodsS3", "R.oo", "RcppArmadillo", "rJava", "rpart", "slam", "survival", "swirl", "TH.data", "yaml"))
install.packages("devtools")
library(devtools)
load_all()
load_all()
library(gorthoR)
library(gorthoR)
library(gorthoR)
library(gorthoR)
library(roxygen2)
roxygenise('gorthoR')
getwd()
getOrthologs()
roxygenise('gorthoR')
roxygenise(gorthoR)
setwd('R/')
roxygenise(gorthoR)
roxygenise('gorthoR')
setwd("../")
library(gorthoR)
roxygenise('gorthoR')
setwd('../')
roxygenise('gorthoR')
roxygenise('gorthoR')
roxygenise('gorthoR')
gortholog.data <- read.table("~/workspace/orthology/web/raw_data/cid_taxid_pepid.tab", sep="\t", head=FALSE, stringsAsFactors=FALSE)
head(gortholog.data)
colnames(gortholog.data) <- c("cluster_id", "taxonomy_id", "ensembl_pep_id")
save(gortholog.data, file="gorthoR/data/gorthologData.rda")
ls()
rm(list=ls())
ls()
data()
ls()
data(package="gorthoR")
ls()
system.file()
system.file(package="gorthoR")
system.file('data', package="gorthoR")
load(system.file('data', 'gorthologData.rda', package="gorthoR"))
ls()
rm(list=ls())
data(gortholog.data)
data(gorthologData)
ls()
head(gortholog.data)
head( gortholog.data[,2] == 9606)
head( gortholog.data[,2] == c(9606, 8083))
taxid <- c(4896,4932)
y <- sapply(taxid, function(x, gd=gd, idx=idx) { return( which(gd[, idx] == x )) }, gd=gortholog.data, idx=2)
length(y)
y
z <- unlist(y)
length(z)
roxygenise('gorthoR')
library(gorthoR)
ls()
rm(list=ls())
pombe_scer <- getAllOrthologs(taxid=c(4896,4932))
pombe_scer
head(spombe_scer)
head(pombe_scer)
head(pombe_scer[,:])
head(pombe_scer[ ,1])
file.remove("gorthoR/data/gorthologData.rda")
gortholog.peptide.id <- gortholog.data
save(gortholog.peptide.id, "gorthoR/data/gorthologPeptideId.rda")
save(gortholog.peptide.id, file="gorthoR/data/gorthologPeptideId.rda")
getAllOrthologs <- function(taxid=taxid, species.column.index=2) {
data(gorthologPeptideId)  # where to load this in package-wide scope?
row.index <- match(taxid, gortholog.peptide.id[,species.column.index])
#row.index <- unlist(
#sapply(taxid, function(x, gd=gd, idx=idx) { return( which(gd[, idx] == x )) },
#gd=gortholog.peptide.id, idx=species.column.index) )
return(gortholog.peptide.id[row.index,])
}
roxygenise('gorthoR')
pombe_scer <- getAllOrthologs(taxid=c(4896,4932))
roxygenise('gorthoR')
roxygenise('gorthoR')
data()
data(package="gorthoR")
ls()
rm(list=ls())
pombe_scer <- getAllOrthologs(taxid=c(4896,4932))
dim(pombe_scer)
pombe_scer
data(gorthologPeptideId)  # where to load this in package-wide scope?
ensembl.pep.id <- c("SPBC428.13c.1:pep", "SPBC3B8.02.1:pep")
empty<-( is.na(ensembl.pep.id) | ensembl.pep.id =='' )
empty
empty <- ( is.na(ensembl.pep.id) | ensembl.pep.id =='' )
if ( sum(empty) > 0 ) warning('One or more empty gene ID/cluster in input')
sum(empty)
row.index1 <- match(ensembl.pep.id, gortholog.peptide.id[ , epid.index])
epid.index <- 3
row.index1 <- match(ensembl.pep.id, gortholog.peptide.id[ , epid.index])
row.index1
ensembl.pep.id <- c("SPBC428.13c.1:pep", "SPBC3B8.02.1:pep", "SPBC428.13c.1:pep")
row.index1 <- match(ensembl.pep.id, gortholog.peptide.id[ , epid.index])
row.index1
cluster.id <- gortholog.peptide.id[row.index1, clusterid.index]
clusterid.index <- 1
cluster.id <- gortholog.peptide.id[row.index1, clusterid.index]
cluster.id
noentry <- (is.na(row.index1) & !empty)
empty <- ( is.na(ensembl.pep.id) | ensembl.pep.id =='' )
noentry <- (is.na(row.index1) & !empty)
if ( sum(noentry) > 0 ) warning('One or more gene input gene ID/cluster not found in gortholog')
target.epid <- as.list( rep(no.id, length(ensembl.pep.id)) )
no.id <- NA
target.epid <- as.list( rep(no.id, length(ensembl.pep.id)) )
target.epid
row.index2 <- gortholog.peptide.id[ , taxid.index] == target.taxid
taxid.index <- 2
target.taxid <- 4932
row.index2 <- gortholog.peptide.id[ , taxid.index] == target.taxid
idx <- which(!empty & !noentry)
idx
gortholog.peptide.id[ which( row.index2 & gortholog.peptide.id[ , clusterid.index] == cluster.id[idx[1]]), epid.index]
gortholog.peptide.id[ which( row.index2 & gortholog.peptide.id[ , clusterid.index] == cluster.id[idx[2]]), epid.index]
gortholog.peptide.id[ which( row.index2 & gortholog.peptide.id[ , clusterid.index] == cluster.id[idx[3]]), epid.index]
if (sum(!empty & !noentry) > 0) {
for (i in 1:sum(!empty & !noentry)) {
target.epid[[idx[i]]] <- gortholog.peptide.id[ which( row.index2 & gortholog.peptide.id[ , clusterid.index] == cluster.id[idx[i]]), epid.index]
}
}
target.epid.nb<-sapply(target.id,function(x) {length(x)})
target.epid.nb<-sapply(target.epid, function(x) { length(x) })
notargetid <- targetidnb==0
target.epid.db
target.epid.nb
notarget.id <- targetidnb == 0
no.target.epid <- target.epid.nb == 0
if (sum(no.target.id) > 0) warning('One or more gene ID/cluster with no target provided in homologue table')
if (sum(no.target.epid) > 0) warning('One or more gene ID/cluster with no target provided in homologue table')
target.epid[noentry | no.target.epid] <- no.id
if (diagnose) list(targetid,empty,noentry,notargetid)
if (diagnose) list(target.epid,empty,noentry,no.target.epid)
diagnose <- FALSE
if (diagnose) list(target.epid,empty,noentry,no.target.epid)
else target.epid
target.epid[noentry | no.target.epid] <- no.id
taget.epid
target.epid
getOrthologs <- function(source.taxid=target.taxid, target.taxid=target.taxid,
ensembl.pep.id=ensembl.pep.id,
clusterid.index=1, taxid.index=2, epid.index=3,
no.id=NA, diagnose=FALSE) {
# no input?
empty <- ( is.na(ensembl.pep.id) | ensembl.pep.id =='' )
if ( sum(empty) > 0 ) warning('One or more empty gene ID/cluster in input')
# find cluster of query
data(gorthologPeptideId)
source.epid.ridx <- match(ensembl.pep.id, gortholog.peptide.id[ , epid.index])
cluster.id <- gortholog.peptide.id[source.epid.ridx, clusterid.index]
# fail to map to cluster?
noentry <- (is.na(row.index1) & !empty)
if ( sum(noentry) > 0 ) warning('One or more gene input gene ID/cluster not found in gortholog')
# create list since one-to-many
target.epid <- as.list( rep(no.id, length(ensembl.pep.id)) )
# target species row index
target.taxid.ridx <- gortholog.peptide.id[ , taxid.index] == target.taxid
# which row to process
idx <- which(!empty & !noentry)
if (sum(!empty & !noentry) > 0) {
for (i in 1:sum(!empty & !noentry)) {
# For each row of query and its cluster, select target species AND have the cluster ID; return ensembl pep id column
target.epid[[idx[i]]] <- gortholog.peptide.id[ which( target.taxid.ridx & gortholog.peptide.id[ , clusterid.index] == cluster.id[idx[i]]), epid.index]
}
}
# map to no gene (i.e. though query map to a cluster, but the cluster is absent in target species)
target.epid.nb<-sapply(target.epid, function(x) { length(x) })
no.target.epid <- target.epid.nb == 0
if (sum(no.target.epid) > 0) warning('One or more gene ID/cluster with no target provided in homologue table')
# assign to NA
target.epid[noentry | no.target.epid] <- no.id
#
if (diagnose) {
return(list(target.epid,empty,noentry,no.target.epid))
} else {
return(target.epid)
}
}
getOrthologs(source.taxid=4896, target.taxid=4932, ensembl.pep.id=ensembl.pep.id)
ensembl.pep.id
print(ensembl.pep.id)
str(ensembl.pep.id)
getOrthologs(source.taxid=4932, target.taxid=4896, ensembl.pep.id=c("YIL106W", "YOR358W"))
gortholog.ensembl.peptide.id <- gortholog.peptide.id
file.remove("gorthoR/data//gorthologPeptideId.rda")
save(gortholog.ensembl.peptide.id, file="gorthoR/data/EnsemblPeptideId.rda")
roxygenise('gorthoR')
roxygenise('gorthoR')
roxygenise('gorthoR')
rm(list=ls())
ls(0)
ls()
GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c("YIL106W", "YOR358W"), type.id="ensembl_pep_id")
GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c("YIL106W", "YOR358W"), id.type="ensembl_pep_id")
roxygenise('gorthoR')
library(gorthoR)
GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c("YIL106W", "YOR358W"), id.type="ensembl_pep_id")
spombe.scer <- GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c("YIL106W", "YOR358W"), id.type="ensembl_pep_id")
dim(spombe.scer)
head(spombe.scer)
spombe.scer <- GetAllOrthologs(taxid=c(9606, 10090), id.type="ensembl_pep_id")
GetAllOrthologs <- function(taxid=taxid, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"), taxid.ridx=2) {
gortholog.data <- LoadGorthologData(id.type)
#row.index <- match(taxid, gortholog.data[ , taxid.index])
row.index <- unlist(
sapply(taxid, function(x, gd=gd, idx=idx) { return( which(gd[, idx] == x )) },
gd=gortholog.data, idx=taxid.ridx) )
return(gortholog.data[row.index,])
}
spombe.scer <- GetAllOrthologs(taxid=c(9606, 10090), id.type="ensembl_pep_id")
dim(spombe.scer)
head(spombe.scer)
tail(spombe.scer)
roxygenise('gorthoR')
library(gorthoR)
ls()
GetClusterID <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE) {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('One or more empty gene ID/cluster in input')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('One or more gene input gene ID/cluster not found in gortholog')
return( as.vector(cluster.id) )
}
GetClusterID(query.id=c("YIL106W", "YOR358W"), id.type="ensembl_pep_id")
taxid
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE, url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
file.path(url.base, 'view/cluster/', cluster.id[1] . '/sequence/fasta')
return(file.path)
}
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE,
url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
file.path(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta')
return(file.path)
}
GetAlignment(query.id="YIL106W", id.type="ensembl_pep_id", taxid=4896)
url
?url
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE,
url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
url.fasta <- file.path(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta')
return(url.fasta)
}
GetAlignment(query.id="YIL106W", id.type="ensembl_pep_id", taxid=4896)
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE,
url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
url.fasta <- file.path(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta')
library(Biostrings)
alignment <- read.AAStringSet(url.fasta, "fasta")
return(alignment)
}
YIL106W.aln <- GetAlignment(query.id="YIL106W", id.type="ensembl_pep_id", taxid=4896)
library(Biostrings)
readDNAMultipleAlignment("http://localhost:3000//view/cluster//MC0000147//sequence/fasta", format="fasta")
readAAMultipleAlignment("http://localhost:3000//view/cluster//MC0000147//sequence/fasta", format="fasta")
readAAMultipleAlignment("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/p450.mul", format="fasta")
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE,
url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
url.fasta <- cat(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta', sep="")
library(Biostrings)
alignment <- read.AAStringSet(url.fasta, "fasta")
return(alignment)
}
YIL106W.aln <- GetAlignment(query.id="YIL106W", id.type="ensembl_pep_id", taxid=4896)
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE,
url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
url.fasta <- cat(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta', sep="")
library(Biostrings)
alignment <- readAAMultipleAlignment(url.fasta, "fasta")
return(alignment)
}
YIL106W.aln <- GetAlignment(query.id="YIL106W", id.type="ensembl_pep_id", taxid=4896)
ls()
gortholog.ensembl.peptide.id[,3] == "IL106W"
which(gortholog.ensembl.peptide.id[,3] == "YIL106W")
gortholog.ensembl.peptide.id[106971,]
cluster.id <- "MC0000147"
url.fasta <- cat(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta', sep="")
url.base="http://localhost:3000/"
url.fasta <- cat(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta', sep="")
url.fasta
url.fasta <- paste(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta', sep="")
library(Biostrings)
alignment <- readAAMultipleAlignment(url.fasta, "fasta")
GetAlignment <- function(query.id=query.id, id.type=c("entrez_gene_id", "ensembl_pep_id", "ensembl_gene_id"),
taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,
no.id=NA, diagnose=FALSE,
url.base="http://localhost:3000/") {
# no input?
empty <- ( is.na(query.id) | query.id =='' )
if ( sum(empty) > 0 ) warning('No query gene')
# more input?
if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')
# find cluster of query
gortholog.data <- LoadGorthologData(id.type)
query.ridx <- match(query.id, gortholog.data[ , id.cidx])
cluster.id <- gortholog.data[query.ridx, clusterid.cidx]
# fail to map to cluster?
noentry <- (is.na(query.ridx) & !empty)
if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')
# fetch cluster
url.fasta <- paste(url.base, 'view/cluster/', cluster.id[1], '/sequence/fasta', sep="")
library(Biostrings)
alignment <- readAAMultipleAlignment(url.fasta, "fasta")
return(alignment)
}
ptpn4a1.aln <- GetAlignment(query.id="ENSP00000359685", id.type="ensembl_pep_id")
ptpn4a1.aln <- GetAlignment(query.id="ENSP00000359685", id.type="ensembl_pep_id", url.base="http://127.0.0.1:3000/view/cluster/MC0001030-2/sequence/fasta")
library(RCurl)
?rcurl
？Rcurl
?RCurl
?Rcurl
getURLContent('http://127.0.0.1:3000/view/cluster/MC0001030-2/sequence/fasta')
ls()
getURL('http://127.0.0.1:3000/view/cluster/MC0001030-2/sequence/fasta')
library(gorthoR)
library(Lahman)
library(plyr)
games <- ddply(Batting, "playerID", summarise, total = sum(G))
head(arrange(games, desc(total)), 5)
my.url <- 'http://resdev.gene.com/gOrtholog/view/cluster/MC0001030-2/sequence/tree/ninja/newick'
library(ape)
tree1 <- read.tree(my.url)
tree1
getwd()
setwd(../)
setwd("../")
getwd()
ls()
library(ape)
library(Biostrings)
library(gorthoR)
library(gorthoR)
orthologfile <- system.file("extdata", "cid_taxid_pgi.tab", package="my_package")
orthologfile <- system.file("extdata", "cid_taxid_pgi.tab", package="gorthoR")
orthologfile
ortholog.df <- read.table("extdata//cid_taxid_pgi.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
ortholog.data <- ortholog.df
data(EnsemblPeptideId)  # where to load this in package-wide scope?
data()
data(package="gorthoR")
colnames(gortholog.ensembl.peptide.id)
colnames(ortholog.data) <- c("cluster_id", "taxonomy_id", "ensembl_pep_id")
gortholog.data <- ortholog.data
save("gortholog.data", file="data/gorthologData.rda")
colnames(gortholog.data) <- c("cluster_id", "taxonomy_id", "primary_id")
save("gortholog.data", file="data/gorthologData.rda")
ensembl.pepid <- read.table("extdata//pgi_ens_pep_id.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(ensembl.pepid) <- c("primary_id", "ensembl_pepid")
save("ensembl.pepid", file="data/ensemblPepid.rda")
ensembl.geneid <- read.table("extdata//pgi_ens_gene_id.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(ensembl.geneid) <- c("primary_id", "ensembl_geneid")
save("ensembl.geneid", file="data/ensemblGeneid.rda")
entrez.geneid <- read.table("extdata//pgi_gene_id.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(entrez.geneid) <- c("primary_id", "entrez_geneid")
save("entrez.geneid", file="data/entrezGeneid.rda")
data(package="gorthoR")
getwd()
setwd("../")
setwd("gorthoR/")
gortholog.entrez.geneid <- read.table("extdata//cid_taxid_gene_id.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
save("gortholog.entrez.geneid", file="data/gorthologDataEntrezGeneid.rda")
gortholog.ensembl.geneid <- read.table("extdata//cid_taxid_ens_gene_id.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(gortholog.ensembl.geneid) <- c("cluster_id", "taxonomy_id", "ensembl_geneid")
save("gortholog.ensembl.geneid", file="data/gorthologDataEnsemblGeneid.rda")
gortholog.ensembl.pepid <- read.table("extdata//cid_taxid_ens_pep_id.tab", header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(gortholog.ensembl.pepid) <- c("cluster_id", "taxonomy_id", "ensembl_pepid")
save("gortholog.ensembl.pepid", file="data/gorthologDataEnsemblPepid.rda")
setwd("../")
ls()
rm(list=ls())
ls()
library(gorthoR)
human.mouse <- GetAllOrthologs(taxid=c(9606, 10090), id.type="entrez_gene_id")
head(human.mouse)
scer.pombe <- GetAllOrthologs(taxid=c(4932, 4896), id.type="entrez_gene_id")
head(scer.pombe)
head(scer.pombe)$V3
GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c("851713", "853198"), id.type="entrez_gene_id")
GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c(851713, 853198), id.type="entrez_gene_id")
GetOrthologs(source.taxid=4932, target.taxid=4896, query.id=c(854700, 854540), id.type="entrez_gene_id")
GetClusterID(query.id=c(854700, 854540), id.type="entrez_gene_id")
getwd()
library(gorthoR)

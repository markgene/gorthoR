{
    "contents" : "#' Get orthologous cluster ID\n#' \n#' Find orthologous cluster given gene/protein IDs\n#' \n#' @param query.id query IDs\n#' @param id.type type.id which type of IDs are used: Entrez Gene ID, Ensembl gene ID, Ensembl peptide ID\n#' @param taxid query species\n#' @return a vector of orthologous cluster IDs (NAs for failed query IDs)\n#' @keywords ortholog gortholog\n#' @export\n#' @examples\n#' GetClusterID(query.id=c(\"YIL106W\", \"YOR358W\"), id.type=\"ensembl_pep_id\")\n#' GetClusterID(query.id=c(854700, 854540), id.type=\"entrez_gene_id\")\n#' @author Mark J Chen \\email{chenj99@@gene.com}\n#' \nGetClusterID <- function(query.id=query.id, id.type=c(\"entrez_gene_id\", \"ensembl_pep_id\", \"ensembl_gene_id\"), \n                         taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,\n                         no.id=NA, diagnose=FALSE) {\n  # no input?\n  empty <- ( is.na(query.id) | query.id =='' )\n  if ( sum(empty) > 0 ) warning('One or more empty gene ID/cluster in input')  \n  # find cluster of query \n  gortholog.data <- LoadGorthologData(id.type)\n  query.ridx <- match(query.id, gortholog.data[ , id.cidx])\n  cluster.id <- gortholog.data[query.ridx, clusterid.cidx]\n  # fail to map to cluster?\n  noentry <- (is.na(query.ridx) & !empty)\n  if ( sum(noentry) > 0 ) warning('One or more gene input gene ID/cluster not found in gortholog')\n  return( as.vector(cluster.id) )\n}\n\n\n#' Get alignment\n#' \n#' Given a query, fetch the alignment of its orthologous cluster from gOrtholog website\n#' \n#' @param query.id query IDs\n#' @param id.type type.id which type of IDs are used: Entrez Gene ID, Ensembl gene ID, Ensembl peptide ID\n#' @param taxid query species\n#' @return an object of class AAMultipleAlignment (see \\code{\\link{MultipleAlignment-class}})\n#' @keywords ortholog gortholog\n#' @import Biostrings\n#' @export\n#' @seealso \\code{\\link{MultipleAlignment-class}}\n#' @examples\n#' ptpn4a1.aln <- GetAlignment(query.id=\"ENSP00000359685\", id.type=\"ensembl_pep_id\")\n#' @author Mark J Chen \\email{chenj99@@gene.com}\n#' \nGetAlignment <- function(query.id=query.id, id.type=c(\"entrez_gene_id\", \"ensembl_pep_id\", \"ensembl_gene_id\"), \n                         taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,\n                         no.id=NA, diagnose=FALSE, \n                         url.base=\"http://resdev.gene.com/gOrtholog/\") {\n  # no input?\n  empty <- ( is.na(query.id) | query.id =='' )\n  if ( sum(empty) > 0 ) warning('No query gene')\n  # more input?\n  if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')\n  # find cluster of query \n  gortholog.data <- LoadGorthologData(id.type)\n  query.ridx <- match(query.id, gortholog.data[ , id.cidx])\n  cluster.id <- gortholog.data[query.ridx, clusterid.cidx]\n  # fail to map to cluster?\n  noentry <- (is.na(query.ridx) & !empty)\n  if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')\n  # fetch cluster\n  url.fasta <- paste(url.base, 'view/cluster/', cluster.id[1], '/sequence/alignment/muscle', sep=\"\")\n  library(Biostrings)\n  alignment <- readAAMultipleAlignment(url.fasta, \"fasta\")\n  return(alignment)\n}\n\n\n#' Get tree\n#' \n#' Given a query, fetch the tree of it and its orthologous cluster from \n#' gOrtholog website\n#' \n#' @param query.id query IDs\n#' @param id.type type.id which type of IDs are used: Entrez Gene ID, Ensembl gene ID, Ensembl peptide ID\n#' @param taxid query species\n#' @return An object of class \"phylo\" (see \\code{\\link{read.tree}}).\n#' @keywords ortholog gortholog\n#' @import ape\n#' @export\n#' @seealso \\code{\\link{read.tree}}\n#' @examples\n#' ptpn4a1.aln <- GetAlignment(query.id=\"ENSP00000359685\", id.type=\"ensembl_pep_id\")\n#' @author Mark J Chen \\email{chenj99@@gene.com}\n#' \nGetTree <- function(query.id=query.id, id.type=c(\"entrez_gene_id\", \"ensembl_pep_id\", \"ensembl_gene_id\"), \n                         taxid=taxid, clusterid.cidx=1, taxid.cidx=2, id.cidx=3,\n                         no.id=NA, diagnose=FALSE, \n                         url.base=\"http://resdev.gene.com/gOrtholog/\") {\n  # no input?\n  empty <- ( is.na(query.id) | query.id =='' )\n  if ( sum(empty) > 0 ) warning('No query gene')\n  # more input?\n  if ( sum(empty) > 1 ) warning('More than one query genes; Fetch the first.')\n  # find cluster of query \n  gortholog.data <- LoadGorthologData(id.type)\n  query.ridx <- match(query.id, gortholog.data[ , id.cidx])\n  cluster.id <- gortholog.data[query.ridx, clusterid.cidx]\n  # fail to map to cluster?\n  noentry <- (is.na(query.ridx) & !empty)\n  if ( sum(noentry) > 0 ) warning('Query is not found in gortholog')\n  # fetch cluster\n  url.ninja.newick <- paste(url.base, 'view/cluster/', cluster.id[1], '/sequence/tree/ninja/newick', sep=\"\")\n  library(ape)\n  tre <- read.tree(url.ninja.newick)\n  return(tre)\n}",
    "created" : 1390164004799.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "51|72|69|0|\n",
    "hash" : "1690423437",
    "id" : "22562C54",
    "lastKnownWriteTime" : 1390456972,
    "path" : "~/workspace/orthology/web/gorthoR/R/OrthologousCluster.R",
    "project_path" : "R/OrthologousCluster.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}